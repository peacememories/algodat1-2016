---
layout: post
title:  "UE 01"
date:   2016-03-12 23:33:42 +0100
categories: ue
---

# Inhalt

* TOC
{:toc}

# 1: Stable Matching

## Angabe

> Betrachten Sie folgende Problemstellung fur das Stable-Matching-Problem
> mit vier Frauen (A-D) und vier M&auml;nnern (W-Z). Berechnen Sie ein Stable Matching
> mithilfe des Gale-Shapley-Algorithmus aus den Vorlesungsfolien. L&auml;sst der Algorithmus
> offen, welche/r Frau/Mann als n&auml;chstes betrachtet werden soll, dann gehen Sie in alphabetischer
> Reihenfolge vor. Stellen Sie die einzelnen Berechnungsschritte in Form der
> aktuell fixierten Paare dar (alle Zwischenschritte sollen angegeben werden).
>
|   | 1. | 2. | 3. | 4. |
|---|----|----|----|----|
| W | B  | D  | A  | C  |
| X | C  | A  | B  | D  |
| Y | B  | A  | D  | C  |
| Z | A  | B  | D  | C  |
>
|   | 1. | 2. | 3. | 4. |
|---|----|----|----|----|
| A | W  | Z  | X  | Y  |
| B | Z  | W  | X  | Y  |
| C | Z  | X  | Y  | W  |
| D | X  | Z  | Y  | W  |

## Algorithmus

Der Gale-Shapley-Algorithmus f&uuml;r Stable Matching lautet wie folgt:

```
function stableMatching {
    Initialize all m ∈ M and w ∈ W to free
    while ∃ free man m who still has a woman w to propose to {
       w = first woman on m’s list to whom m has not yet proposed
       if w is free
         (m, w) become engaged
       else some pair (m', w) already exists
         if w prefers m to m'
            m' becomes free
           (m, w) become engaged
         else
           (m', w) remain engaged
    }
}
```

## L&ouml;sung

```
W proposes to B
B accepts
X proposes to C
C accepts
Y proposes to B
B declines
Y proposes to A
A accepts
Z proposes to A
A accepts, leaving Y
Y proposes D
D accepts
```

Final pairings: `(W|B), (X|C), (Y|D), (Z|A)`

# 2:

## Angabe

> Gegeben seien drei Algorithmen mit den unten angefuhrten Laufzeiten.
Nehmen Sie an, dass es sich dabei um die exakte Anzahl an ausgefuhrten Operationen in
Abh&auml;ngigkeit der Eingabegr&ouml;ße n handelt. Ihnen steht ein Computer zur Verf&uuml;gung, der $$10^{12}$$ Operationen pro Sekunde ausf&uuml;hren kann. Wie groß ist die maximale Eingabegr&ouml;ße n, f&uuml;r die Sie innerhalb einer Stunde auf besagter Hardware ein Ergebnis berechnen k&ouml;nnen?
>
* $$100*n^2$$
* $$10000*2^n$$
* $$2^{2^n}$$

## L&ouml;sung

$$10^{12}$$ Operationen pro Sekunde bedeutet $$3600*10^{12}$$ Operationen pro Stunde

1. $$
   \begin{align*}
     100*n^2 &= 3600*10^{12}\\
     n^2 &= 3600*10^{10}\\
     n &= 6*10^6
   \end{align*}
   $$
2. $$
  \begin{align*}
    10^4*2^n &= 3600*10^{12}\\
    2^n &= 3600*10^8\\
    n &= 2*log_2(60)+8*log_2(10)\\
    n &= 38
  \end{align*}
  $$
3. $$
  \begin{align*}
    2^{2^n} &= 60^2 * 10^{12}\\
    2^n &= 2*log_2(60) + 12*log_2(10)\\
    n &= 1+log_2(log_2(60) + 6*log_2(10))\\
    n &= 5
  \end{align*}
  $$

# 3:

## Angabe

> Gegeben seien zwei Funktionen f(n) und g(n) fur die gilt, dass f(n) =
O(g(n)) und g(n) = O(f(n)). Beweisen Sie nachfolgende Aussagen oder widerlegen Sie
sie durch Angabe eines Gegenbeispiels:
>
* $$f(n) = \Theta(g(n))$$
* $$f(n) = g(n)$$

## L&ouml;sung

1. $$f(n)$$ nach oben begrenzt durch $$g(n)$$, $$g(n)$$ nach oben begrenzt durch $$f(n)$$. Das bedeutet $$f(n)$$ ist nach oben und unten begrenzt durch $$g(n)$$. Beweis folgt.
2. Gegenbeispiel: $$f(n) = 2*g(n)$$

# 4:

## Angabe

> Beantworten Sie folgende Fragen und begr&uuml;nden Sie Ihre Antwort:
>
* Ist es m&ouml;glich, dass ein Algorithmus auf bestimmten Instanzen eine Laufzeit von
$$O(n)$$ aufweist, wenn seine Worst-Case-Laufzeit in $$O(n^2)$$ liegt?
* Ist es m&ouml;glich, dass ein Algorithmus auf allen Instanzen eine Laufzeit von $$O(n)$$
aufweist, wenn seine Worst-Case-Laufzeit in $$O(n^2)$$ liegt?

## L&ouml;sung

1. Beispiel: Quicksort. Worst case $$n^2$$, best case $$n$$
2. Da Worst-Case-Laufzeit ein realer Worst-Case ist - nicht nur eine Begrenzung - nein.

# 5:

> F&uuml;llen Sie folgende Tabelle aus und begr&uuml;nden Sie Ihre Antworten:

|                             | richtig | falsch |
|-----------------------------|:-------:|:------:|
| $$3^n = O(2^n)$$            |         |  X     |
| $$log3^n = O(log2^n)$$      |  X      |        |
| $$3^n = \Omega(2^n)$$       |  X      |        |
| $$log3^n = \Omega(log2^n)$$ |  X      |        |

## Begr&uuml;ndung

1. $$3^n > k*2^n$$ f&uuml;r fast alle $$n > 0$$
2. $$
   \begin{align*}
     log3^n &= O(log2^n) \\
     n*log3 &= O(n*log2) \\
     n &= O(n)
   \end{align*}
   $$
3. Siehe `1.`
4. Siehe `2.`

# 6:

## Angabe

> Finden Sie f&uuml;r nachfolgende Funktionen $$f_i$$ jeweils m&ouml;glichst einfache Funktionen $$g_i$$, sodass gilt $$f_i(n) = \Theta(g_i(n)) (i \in \{1, 2, 3, 4,\})$$.
>
* $$f_1(n) = 1000 * 2^n + 4^n$$
* $$f_2(n) = n+n * log(n) + \sqrt{n}$$
* $$f_3(n) = log_2(n^{30}) + (log_2(n))^{10}$$
* $$f_4(n) = 0.99^n + n^100$$

## L&ouml;sung

1. $$f_1(n) = \Theta(4^n)$$
2. $$f_2(n) = \Theta(n*log(n))$$
3. $$f_3(n) = \Theta(log(n)^{10})$$
4. $$f_4(n) = \Theta(n^{100})$$

# 7:

## Angabe

> Bestimmen Sie die Laufzeit des folgenden Pseudocodes in O-Notation in Abh&auml;ngigkeit von der Eingabegr&ouml;&szlig;e n. Geben Sie des Weiteren den R&uuml;ckgabewert (r) als Funktion in Abh&auml;ngigkeit der Eingabegr&ouml;&szlig;e n an.
>
```
mystery():
r <- 0
for i <- 1 bis n-1
  for j <- i + 1 bis n
    for k <- 1 bis j
      r <- r + 1
return r
```

## L&ouml;sung

1. $$\text{mystery}(n) = O(n^3)$$
2. $$r = \frac{1}{3}* n(n^2-1)$$

# 8:

## Angabe

> Beweisen Sie folgende Aussage: Falls $$f_1(n) = O(g_1(n))$$ und $$f_2(n) = O(g_2(n))$$ dann gilt $$f_1(n)* f_2(n) = O(g_1(n)* g_2(n))$$.

## L&ouml;sung

$$f_1(n) \leq k_1*g_1(n)$$ f&uuml;r fast alle n

$$f_2(n) \leq k_2*g_2(n)$$ f&uuml;r fast alle n

$$f_1(n)* f_2(n) \leq k_1*k_2*g_1(n)* g_2(n)$$ f&uuml;r fast alle n
